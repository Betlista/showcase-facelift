<ui:composition xmlns="http://www.w3.org/1999/xhtml"
                xmlns:ui="http://java.sun.com/jsf/facelets"
                xmlns:h="http://java.sun.com/jsf/html"
                xmlns:f="http://java.sun.com/jsf/core"
                xmlns:p="http://primefaces.org/ui"
                template="/WEB-INF/template.xhtml">

    <ui:define name="head">
        <style type="text/css">
            .value {
                font-weight: bold;
            }
        </style>
	</ui:define>

    <ui:define name="title">
        SelectOneMenu
    </ui:define>

    <ui:define name="description">
        SelectOneMenu is used to choose a single item from a list.
    </ui:define>

    <ui:define name="implementation">

        <h:form>
            <p:messages>
                <p:autoUpdate />
            </p:messages>

            <h:panelGrid columns="2" style="margin-bottom:10px" cellpadding="5">
                <p:outputLabel for="console" value="Basic:" />
                <p:selectOneMenu id="console" value="#{selectOneMenuView.console}" style="width:125px">
                    <f:selectItem itemLabel="Select One" itemValue="" />
                    <f:selectItem itemLabel="Xbox One" itemValue="Xbox One" />
                    <f:selectItem itemLabel="PS4" itemValue="PS4" />
                    <f:selectItem itemLabel="Wii U" itemValue="Wii U" />
                </p:selectOneMenu>

                <p:outputLabel for="car" value="Grouping: " />
                <p:selectOneMenu id="car" value="#{selectOneMenuView.car}">
                    <f:selectItem itemLabel="Select One" itemValue="" />
                    <f:selectItems value="#{selectOneMenuView.cars}" />
                </p:selectOneMenu>

                <p:outputLabel for="city" value="Editable: " />
                <p:selectOneMenu id="city" value="#{selectOneMenuView.city}" effect="fold" editable="true">
                    <f:selectItem itemLabel="Select One" itemValue="" />
                    <f:selectItems value="#{selectOneMenuView.cities}" />
                </p:selectOneMenu>

                <p:outputLabel for="advanced" value="Advanced:" />
                <p:selectOneMenu id="advanced" value="#{selectOneMenuView.theme}" converter="themeConverter" panelStyle="width:180px"
                                 effect="fade" var="t" style="width:160px" filter="true" filterMatchMode="startsWith">
                    <f:selectItems value="#{selectOneMenuView.themes}" var="theme" itemLabel="#{theme.displayName}" itemValue="#{theme}" />

                    <p:column style="width:10%">
                        <h:graphicImage name="showcase/images/themeswitcher/themeswitcher-#{theme.name}.png" alt="#{theme.name}" styleClass="ui-theme" />
                    </p:column>

                    <p:column>
                        <h:outputText value="#{t.displayName}" />
                    </p:column>
                </p:selectOneMenu>

                <p:outputLabel for="lazy" value="Lazy:" />
                <p:selectOneMenu id="lazy" value="#{selectOneMenuView.option}" dynamic="true" style="width:125px">
                    <f:selectItem itemLabel="Select One" itemValue="" />
                    <f:selectItems value="#{selectOneMenuView.options}" />
                </p:selectOneMenu>
            </h:panelGrid>

            <p:commandButton value="Submit" update="display" oncomplete="PF('dlg').show()" icon="pi pi-check" />

            <p:dialog header="Values" modal="true" showEffect="bounce" widgetVar="dlg" resizable="false">
                <p:panelGrid columns="2" id="display" columnClasses="label,value">
                    <h:outputText value="Basic:" />
                    <h:outputText value="#{selectOneMenuView.console}" />

                    <h:outputText value="Grouping:" />
                    <h:outputText value="#{selectOneMenuView.car}" />

                    <h:outputText value="Editable" />
                    <h:outputText value="#{selectOneMenuView.city}" />

                    <h:outputText value="Advanced:" />
                    <h:outputText value="#{selectOneMenuView.theme.displayName}" />

                    <h:outputText value="Lazy:" />
                    <h:outputText value="#{selectOneMenuView.option}" />
                </p:panelGrid>
            </p:dialog>
        </h:form>

    </ui:define>

    <ui:define name="source">
        <p:tabView>
            <p:tab title="oneMenu.xhtml">
                <pre name="code" class="brush:xml">
&lt;h:form&gt;
    &lt;p:messages&gt;
        &lt;p:autoUpdate /&gt;
    &lt;/p:messages&gt;

    &lt;h:panelGrid columns="2" style="margin-bottom:10px" cellpadding="5"&gt;
        &lt;p:outputLabel for="console" value="Basic:" /&gt;
        &lt;p:selectOneMenu id="console" value="\#{selectOneMenuView.console}" style="width:125px"&gt;
            &lt;f:selectItem itemLabel="Select One" itemValue="" /&gt;
            &lt;f:selectItem itemLabel="Xbox One" itemValue="Xbox One" /&gt;
            &lt;f:selectItem itemLabel="PS4" itemValue="PS4" /&gt;
            &lt;f:selectItem itemLabel="Wii U" itemValue="Wii U" /&gt;
        &lt;/p:selectOneMenu&gt;

        &lt;p:outputLabel for="car" value="Grouping: " /&gt;
        &lt;p:selectOneMenu id="car" value="\#{selectOneMenuView.car}"&gt;
            &lt;f:selectItem itemLabel="Select One" itemValue="" /&gt;
            &lt;f:selectItems value="\#{selectOneMenuView.cars}" /&gt;
        &lt;/p:selectOneMenu&gt;

        &lt;p:outputLabel for="city" value="Editable: " /&gt;
        &lt;p:selectOneMenu id="city" value="\#{selectOneMenuView.city}" effect="fold" editable="true"&gt;
            &lt;f:selectItem itemLabel="Select One" itemValue="" /&gt;
            &lt;f:selectItems value="\#{selectOneMenuView.cities}" /&gt;
        &lt;/p:selectOneMenu&gt;

        &lt;p:outputLabel for="advanced" value="Advanced:"  /&gt;
        &lt;p:selectOneMenu id="advanced" value="\#{selectOneMenuView.theme}" converter="themeConverter" panelStyle="width:180px"
                         effect="fade" var="t" style="width:160px" filter="true" filterMatchMode="startsWith"&gt;
            &lt;f:selectItems value="\#{selectOneMenuView.themes}" var="theme" itemLabel="\#{theme.displayName}" itemValue="\#{theme}" /&gt;

            &lt;p:column style="width:10%"&gt;
                &lt;h:graphicImage name="showcase/images/themeswitcher/themeswitcher-\#{theme.name}.png" alt="\#{theme.name}" styleClass="ui-theme" /&gt;
            &lt;/p:column&gt;

            &lt;p:column&gt;
                &lt;h:outputText value="\#{t.displayName}" /&gt;
            &lt;/p:column&gt;
        &lt;/p:selectOneMenu&gt;

        &lt;p:outputLabel for="lazy" value="Lazy:" /&gt;
        &lt;p:selectOneMenu id="lazy" value="\#{selectOneMenuView.option}" lazy="true" style="width:125px"&gt;
            &lt;f:selectItem itemLabel="Select One" itemValue="" /&gt;
            &lt;f:selectItems value="\#{selectOneMenuView.options}" /&gt;
        &lt;/p:selectOneMenu&gt;
    &lt;/h:panelGrid&gt;

    &lt;p:commandButton value="Submit" update="display" oncomplete="PF('dlg').show()" icon="pi pi-check" /&gt;

    &lt;p:dialog header="Values" modal="true" showEffect="bounce" widgetVar="dlg" resizable="false"&gt;
        &lt;p:panelGrid columns="2" id="display" columnClasses="label,value"&gt;
            &lt;h:outputText value="Basic:" /&gt;
            &lt;h:outputText value="\#{selectOneMenuView.console}" /&gt;

            &lt;h:outputText value="Grouping:" /&gt;
            &lt;h:outputText value="\#{selectOneMenuView.car}" /&gt;

            &lt;h:outputText value="Editable" /&gt;
            &lt;h:outputText value="\#{selectOneMenuView.city}" /&gt;

            &lt;h:outputText value="Advanced:" /&gt;
            &lt;h:outputText value="\#{selectOneMenuView.theme.displayName}" /&gt;

            &lt;h:outputText value="Lazy:" /&gt;
            &lt;h:outputText value="\#{selectOneMenuView.option}" /&gt;
        &lt;/p:panelGrid&gt;
    &lt;/p:dialog&gt;
&lt;/h:form&gt;
                </pre>
            </p:tab>

            <p:tab title="SelectOneMenuView.java">
                <pre name="code" class="brush:java">
package org.primefaces.showcase.view.input;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.annotation.PostConstruct;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ManagedProperty;
import javax.faces.model.SelectItem;
import javax.faces.model.SelectItemGroup;

import org.primefaces.showcase.domain.Theme;
import org.primefaces.showcase.service.ThemeService;

@ManagedBean
public class SelectOneMenuView {

    private String console;

    private String car;
    private List&lt;SelectItem&gt; cars;

    private String city;
    private Map&lt;String,String&gt; cities = new HashMap&lt;String, String&gt;();

    private Theme theme;
    private List&lt;Theme&gt; themes;

    private String option;
    private List&lt;String&gt; options;

    @ManagedProperty("\#{themeService}")
    private ThemeService service;

    @PostConstruct
    public void init() {
        //cars
        SelectItemGroup g1 = new SelectItemGroup("German Cars");
        g1.setSelectItems(new SelectItem[] {new SelectItem("BMW", "BMW"), new SelectItem("Mercedes", "Mercedes"), new SelectItem("Volkswagen", "Volkswagen")});

        SelectItemGroup g2 = new SelectItemGroup("American Cars");
        g2.setSelectItems(new SelectItem[] {new SelectItem("Chrysler", "Chrysler"), new SelectItem("GM", "GM"), new SelectItem("Ford", "Ford")});

        cars = new ArrayList&lt;SelectItem&gt;();
        cars.add(g1);
        cars.add(g2);

        //cities
        cities = new HashMap&lt;String, String&gt;();
        cities.put("New York", "New York");
        cities.put("London","London");
        cities.put("Paris","Paris");
        cities.put("Barcelona","Barcelona");
        cities.put("Istanbul","Istanbul");
        cities.put("Berlin","Berlin");

        //themes
        themes = service.getThemes();

        //options
        options = new ArrayList&lt;String&gt;();
        for(int i = 0; i &lt; 20; i++) {
            options.add("Option " + i);
        }
    }

    public String getConsole() {
        return console;
    }

    public void setConsole(String console) {
        this.console = console;
    }

    public String getCar() {
        return car;
    }

    public void setCar(String car) {
        this.car = car;
    }

    public String getCity() {
        return city;
    }

    public void setCity(String city) {
        this.city = city;
    }

    public Theme getTheme() {
        return theme;
    }

    public void setTheme(Theme theme) {
        this.theme = theme;
    }

    public List&lt;SelectItem&gt; getCars() {
        return cars;
    }

    public Map&lt;String, String&gt; getCities() {
        return cities;
    }

    public List&lt;Theme&gt; getThemes() {
        return themes;
    }

    public void setService(ThemeService service) {
        this.service = service;
    }

    public String getOption() {
        return option;
    }

    public void setOption(String option) {
        this.option = option;
    }

    public List&lt;String&gt; getOptions() {
        return options;
    }

    public void setOptions(List&lt;String&gt; options) {
        this.options = options;
    }
}

                </pre>
            </p:tab>

            <p:tab title="Theme.java">
                    <pre name="code" class="brush:java">
package org.primefaces.showcase.domain;

public class Theme {

    private int id;
    private String displayName;
    private String name;

    public Theme() {}

    public Theme(int id, String displayName, String name) {
        this.id = id;
        this.displayName = displayName;
        this.name = name;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getDisplayName() {
        return displayName;
    }

    public void setDisplayName(String displayName) {
        this.displayName = displayName;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    @Override
    public String toString() {
        return name;
    }
}

                </pre>
            </p:tab>

            <p:tab title="ThemeService.java">
                <pre name="code" class="brush:java">
package org.primefaces.showcase.service;

import java.util.ArrayList;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.faces.bean.ApplicationScoped;
import javax.faces.bean.ManagedBean;

import org.primefaces.showcase.domain.Theme;

@ManagedBean(name="themeService", eager = true)
@ApplicationScoped
public class ThemeService {

    private List&lt;Theme&gt; themes;

    @PostConstruct
    public void init() {
        themes = new ArrayList&lt;&gt;();
        themes.add(new Theme(0, "Nova-Light", "nova-light"));
        themes.add(new Theme(1, "Nova-Dark", "nova-dark"));
        themes.add(new Theme(2, "Nova-Colored", "nova-colored"));
        themes.add(new Theme(3, "Luna-Blue", "luna-blue"));
        themes.add(new Theme(4, "Luna-Amber", "luna-amber"));
        themes.add(new Theme(5, "Luna-Green", "luna-green"));
        themes.add(new Theme(6, "Luna-Pink", "luna-pink"));
        themes.add(new Theme(7, "Omega", "omega"));
    }

    public List&lt;Theme&gt; getThemes() {
        return themes;
    }
}


                </pre>
            </p:tab>

            <p:tab title="ThemeConverter.java">
                <pre name="code" class="brush:java">
package org.primefaces.showcase.convert;

import javax.faces.component.UIComponent;
import javax.faces.context.FacesContext;
import javax.faces.convert.Converter;
import javax.faces.convert.FacesConverter;

import org.primefaces.showcase.domain.Theme;
import org.primefaces.showcase.service.ThemeService;

@FacesConverter("themeConverter")
public class ThemeConverter implements Converter {

    public Object getAsObject(FacesContext fc, UIComponent uic, String value) {
        if(value != null &amp;&amp; value.trim().length() &gt; 0) {
            try {
                ThemeService service = (ThemeService) fc.getExternalContext().getApplicationMap().get("themeService");
                return service.getThemes().get(Integer.parseInt(value));
            } catch(NumberFormatException e) {
                throw new ConverterException(new FacesMessage(FacesMessage.SEVERITY_ERROR, "Conversion Error", "Not a valid theme."));
            }
        }
        else {
            return null;
        }
    }

    public String getAsString(FacesContext fc, UIComponent uic, Object object) {
        if(object != null) {
            return String.valueOf(((Theme) object).getId());
        }
        else {
            return null;
        }
    }
}

                </pre>
            </p:tab>

        </p:tabView>

    </ui:define>

</ui:composition>