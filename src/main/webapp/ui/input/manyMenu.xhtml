<ui:composition xmlns="http://www.w3.org/1999/xhtml"
                xmlns:ui="http://java.sun.com/jsf/facelets"
                xmlns:h="http://java.sun.com/jsf/html"
                xmlns:f="http://java.sun.com/jsf/core"
                xmlns:p="http://primefaces.org/ui"
                template="/WEB-INF/template.xhtml">
    
    <ui:define name="head">
        <style type="text/css">
            .ui-datalist .ui-datalist-content {
                border:0 none
            }
            
            .ui-datalist ul {
                padding:0px 10px 0 20px;
                margin: 5px 0;
            }
            
            .label, .value {
                vertical-align: top
            }

            .output {
                font-weight: bold
            }
            
            .ui-selectmanymenu {
                width: 175px;
            }
        </style>
	</ui:define>
    
    <ui:define name="title">
        SelectManyMenu
    </ui:define>

    <ui:define name="description">
        SelectManyMenu is used to choose multiple items from a list.
    </ui:define>

    <ui:define name="implementation">

        <h:form>
            <h:panelGrid columns="2" style="margin-bottom:10px" cellpadding="5" columnClasses="label, value">
                <p:outputLabel for="basic" value="Basic:" />
                <p:selectManyMenu id="basic" value="#{selectManyView.selectedOptions}">
                    <f:selectItem itemLabel="Option 1" itemValue="1" />
                    <f:selectItem itemLabel="Option 2" itemValue="2" />
                    <f:selectItem itemLabel="Option 3" itemValue="3" />
                </p:selectManyMenu>

                <p:outputLabel for="advanced" value="Advanced:" />
                <p:selectManyMenu id="advanced" value="#{selectManyView.selectedThemes}" converter="themeConverter" 
                                  var="t" filter="true" filterMatchMode="contains" showCheckbox="true">
                    <f:selectItems value="#{selectManyView.themes}" var="theme" itemLabel="#{theme.displayName}" itemValue="#{theme}" />

                    <p:column>
                        <h:graphicImage name="showcase/images/themeswitcher/themeswitcher-#{theme.name}.png" alt="#{theme.name}" styleClass="ui-theme" />
                    </p:column>
                    
                    <p:column>
                        <h:outputText value="#{t.displayName}" />
                    </p:column>
                </p:selectManyMenu>
            </h:panelGrid>

            <p:separator />

            <p:commandButton value="Submit" update="display" oncomplete="PF('dlg').show()" icon="pi pi-check" />

            <p:dialog header="Selected Values" modal="true" showEffect="fade" widgetVar="dlg" resizable="false">
                <p:panelGrid columns="2" id="display" columnClasses="label,output">
                    <h:outputText value="Basic:" />
                    <p:dataList value="#{selectManyView.selectedOptions}" var="option">
                        <h:outputText value="#{option}" />
                    </p:dataList>

                    <h:outputText value="Advanced:" />
                    <p:dataList value="#{selectManyView.selectedThemes}" var="t">
                        <h:outputText value="#{t}" />
                    </p:dataList>
                </p:panelGrid>
            </p:dialog>
        </h:form>
        
    </ui:define>

    <ui:define name="source">
        <p:tabView>
            <p:tab title="manyMenu.xhtml">
                <pre name="code" class="brush:xml">
&lt;h:form&gt;
    &lt;h:panelGrid columns="2" style="margin-bottom:10px" cellpadding="5" columnClasses="label, value"&gt;
        &lt;p:outputLabel for="basic" value="Basic:" /&gt;
        &lt;p:selectManyMenu id="basic" value="\#{selectManyView.selectedOptions}"&gt;
            &lt;f:selectItem itemLabel="Option 1" itemValue="1" /&gt;
            &lt;f:selectItem itemLabel="Option 2" itemValue="2" /&gt;
            &lt;f:selectItem itemLabel="Option 3" itemValue="3" /&gt;
        &lt;/p:selectManyMenu&gt;

        &lt;p:outputLabel for="advanced" value="Advanced:" /&gt;
        &lt;p:selectManyMenu id="advanced" value="\#{selectManyView.selectedThemes}" converter="themeConverter" 
                          var="t" filter="true" filterMatchMode="contains" showCheckbox="true"&gt;
            &lt;f:selectItems value="\#{selectManyView.themes}" var="theme" itemLabel="\#{theme.displayName}" itemValue="\#{theme}" /&gt;

            &lt;p:column&gt;
                &lt;h:graphicImage name="showcase/images/themeswitcher/themeswitcher-\#{theme.name}.png" alt="\#{theme.name}" styleClass="ui-theme" /&gt;
            &lt;/p:column&gt;

            &lt;p:column&gt;
                &lt;h:outputText value="\#{t.displayName}" /&gt;
            &lt;/p:column&gt;
        &lt;/p:selectManyMenu&gt;
    &lt;/h:panelGrid&gt;

    &lt;p:separator /&gt;

    &lt;p:commandButton value="Submit" update="display" oncomplete="PF('dlg').show()" icon="pi pi-check" /&gt;

    &lt;p:dialog header="Selected Values" modal="true" showEffect="fade" widgetVar="dlg" resizable="false"&gt;
        &lt;p:panelGrid columns="2" id="display" columnClasses="label,output"&gt;
            &lt;h:outputText value="Basic:" /&gt;
            &lt;p:dataList value="\#{selectManyView.selectedOptions}" var="option"&gt;
                &lt;h:outputText value="\#{option}" /&gt;
            &lt;/p:dataList&gt;

            &lt;h:outputText value="Advanced:" /&gt;
            &lt;p:dataList value="\#{selectManyView.selectedThemes}" var="t"&gt;
                &lt;h:outputText value="\#{t}" /&gt;
            &lt;/p:dataList&gt;
        &lt;/p:panelGrid&gt;
    &lt;/p:dialog&gt;
&lt;/h:form&gt;
                </pre>
            </p:tab>

            <p:tab title="SelectManyView.java">
                <pre name="code" class="brush:java">
package org.primefaces.showcase.view.input;

import java.util.List;
import javax.annotation.PostConstruct;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ManagedProperty;

import org.primefaces.showcase.domain.Theme;
import org.primefaces.showcase.service.ThemeService;

@ManagedBean
public class SelectManyView {
    
    private List&lt;String&gt; selectedOptions;
    private List&lt;Theme&gt; selectedThemes;
    private List&lt;Theme&gt; themes;
    
    @ManagedProperty("\#{themeService}")
    private ThemeService service;
    
    @PostConstruct
    public void init() {
        themes = service.getThemes();
    }

    public List&lt;Theme&gt; getThemes() {
        return themes;
    }

    public void setService(ThemeService service) {
        this.service = service;
    }

    public List&lt;String&gt; getSelectedOptions() {
        return selectedOptions;
    }

    public void setSelectedOptions(List&lt;String&gt; selectedOptions) {
        this.selectedOptions = selectedOptions;
    }

    public List&lt;Theme&gt; getSelectedThemes() {
        return selectedThemes;
    }

    public void setSelectedThemes(List&lt;Theme&gt; selectedThemes) {
        this.selectedThemes = selectedThemes;
    }
}

                </pre>
            </p:tab>
            
            <p:tab title="Theme.java">
                    <pre name="code" class="brush:java">
package org.primefaces.showcase.domain;

public class Theme {

    private int id;    
    private String displayName; 
    private String name;
    
    public Theme() {}

    public Theme(int id, String displayName, String name) {
        this.id = id;
        this.displayName = displayName;
        this.name = name;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getDisplayName() {
        return displayName;
    }

    public void setDisplayName(String displayName) {
        this.displayName = displayName;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }
    
    @Override
    public String toString() {
        return name;
    }
}

                </pre>
            </p:tab>

            <p:tab title="ThemeService.java">
                <pre name="code" class="brush:java">
package org.primefaces.showcase.service;

import java.util.ArrayList;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.faces.bean.ApplicationScoped;
import javax.faces.bean.ManagedBean;

import org.primefaces.showcase.domain.Theme;

@ManagedBean(name="themeService", eager = true)
@ApplicationScoped
public class ThemeService {
    
    private List&lt;Theme&gt; themes;
    
    @PostConstruct
    public void init() {
        themes = new ArrayList&lt;&gt;();
        themes.add(new Theme(0, "Nova-Light", "nova-light"));
        themes.add(new Theme(1, "Nova-Dark", "nova-dark"));
        themes.add(new Theme(2, "Nova-Colored", "nova-colored"));
        themes.add(new Theme(3, "Luna-Blue", "luna-blue"));
        themes.add(new Theme(4, "Luna-Amber", "luna-amber"));
        themes.add(new Theme(5, "Luna-Green", "luna-green"));
        themes.add(new Theme(6, "Luna-Pink", "luna-pink"));
        themes.add(new Theme(7, "Omega", "omega"));
    }
    
    public List&lt;Theme&gt; getThemes() {
        return themes;
    } 
}


                </pre>
            </p:tab>

            <p:tab title="ThemeConverter.java">
                <pre name="code" class="brush:java">
package org.primefaces.showcase.convert;

import javax.faces.component.UIComponent;
import javax.faces.context.FacesContext;
import javax.faces.convert.Converter;
import javax.faces.convert.FacesConverter;

import org.primefaces.showcase.domain.Theme;
import org.primefaces.showcase.service.ThemeService;

@FacesConverter("themeConverter")
public class ThemeConverter implements Converter {

    public Object getAsObject(FacesContext fc, UIComponent uic, String value) {
        if(value != null &amp;&amp; value.trim().length() &gt; 0) {
            try {
                ThemeService service = (ThemeService) fc.getExternalContext().getApplicationMap().get("themeService");
                return service.getThemes().get(Integer.parseInt(value));
            } catch(NumberFormatException e) {
                throw new ConverterException(new FacesMessage(FacesMessage.SEVERITY_ERROR, "Conversion Error", "Not a valid theme."));
            }
        }
        else {
            return null;
        }
    }

    public String getAsString(FacesContext fc, UIComponent uic, Object object) {
        if(object != null) {
            return String.valueOf(((Theme) object).getId());
        }
        else {
            return null;
        }
    }   
} 
                </pre>
            </p:tab>
            
        </p:tabView>

    </ui:define>

</ui:composition>