<ui:composition xmlns="http://www.w3.org/1999/xhtml"
                xmlns:ui="http://java.sun.com/jsf/facelets"
                xmlns:h="http://java.sun.com/jsf/html"
                xmlns:f="http://java.sun.com/jsf/core"
                xmlns:p="http://primefaces.org/ui"
                template="/WEB-INF/template.xhtml">

    <ui:define name="title">
        Charts - <span class="subitem">Mixed</span>
    </ui:define>

    <ui:define name="description">
        Different types of dataSet can be displayed on the same graph.
    </ui:define>

    <ui:define name="implementation">
        <p:barChart model="#{chartJsView.mixedModel}" style="width: 100%; height: 600px;"/>
    </ui:define>

    <ui:define name="source">
        <p:tabView>
            <p:tab title="mixed.xhtml">
                <pre name="code" class="brush:xml">
&lt;p:barChart model="\#{chartJsView.mixedModel}" style="width: 100%; height: 600px;"/&gt;
                </pre>
            </p:tab>

            <p:tab title="ChartJsView.java">
                <pre name="code" class="brush:java">
package org.primefaces.showcase.view.chartjs;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.faces.bean.ManagedBean;
import org.primefaces.model.charts.ChartData;
import org.primefaces.model.charts.axes.cartesian.CartesianScales;
import org.primefaces.model.charts.axes.cartesian.linear.CartesianLinearAxes;
import org.primefaces.model.charts.axes.cartesian.linear.CartesianLinearTicks;
import org.primefaces.model.charts.bar.BarChartDataSet;
import org.primefaces.model.charts.bar.BarChartModel;
import org.primefaces.model.charts.bar.BarChartOptions;
import org.primefaces.model.charts.line.LineChartDataSet;
import org.primefaces.model.charts.line.LineChartModel;

@ManagedBean
public class ChartJsView implements Serializable {

    private BarChartModel mixedModel;

    @PostConstruct
    public void init() {
        createMixedModel();
    }

    public void createMixedModel() {
        mixedModel = new BarChartModel();
        ChartData data = new ChartData();
        
        BarChartDataSet dataSet = new BarChartDataSet();
        List&lt;Number&gt; values = new ArrayList&lt;&gt;();
        values.add(10);
        values.add(20);
        values.add(30);
        values.add(40);
        dataSet.setData(values);
        dataSet.setLabel("Bar Dataset");
        dataSet.setBorderColor("rgb(255, 99, 132)");
        dataSet.setBackgroundColor("rgba(255, 99, 132, 0.2)");
        
        LineChartDataSet dataSet2 = new LineChartDataSet();
        List&lt;Number&gt; values2 = new ArrayList&lt;&gt;();
        values2.add(50);
        values2.add(50);
        values2.add(50);
        values2.add(50);
        dataSet2.setData(values2);
        dataSet2.setLabel("Line Dataset");
        dataSet2.setFill(false);
        dataSet2.setBorderColor("rgb(54, 162, 235)");
        
        data.addChartDataSet(dataSet);
        data.addChartDataSet(dataSet2);
        
        List&lt;String&gt; labels = new ArrayList&lt;&gt;();
        labels.add("January");
        labels.add("February");
        labels.add("March");
        labels.add("April");
        data.setLabels(labels);
        
        mixedModel.setData(data);
        
        //Options
        BarChartOptions options = new BarChartOptions();
        CartesianScales cScales = new CartesianScales();
        CartesianLinearAxes linearAxes = new CartesianLinearAxes();
        CartesianLinearTicks ticks = new CartesianLinearTicks();
        ticks.setBeginAtZero(true);
        linearAxes.setTicks(ticks);
        
        cScales.addYAxesData(linearAxes);
        options.setScales(cScales);
        mixedModel.setOptions(options);
    }

    public BarChartModel getMixedModel() {
        return mixedModel;
    }

    public void setMixedModel(BarChartModel mixedModel) {
        this.mixedModel = mixedModel;
    }
}
                </pre>
            </p:tab>

</p:tabView>
    </ui:define>

</ui:composition>
